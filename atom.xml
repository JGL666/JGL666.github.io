<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://jgl666.github.io</id>
    <title>JGL</title>
    <updated>2020-07-15T17:13:06.615Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://jgl666.github.io"/>
    <link rel="self" href="https://jgl666.github.io/atom.xml"/>
    <subtitle>温故而知新</subtitle>
    <logo>https://jgl666.github.io/images/avatar.png</logo>
    <icon>https://jgl666.github.io/favicon.ico</icon>
    <rights>All rights reserved 2020, JGL</rights>
    <entry>
        <title type="html"><![CDATA[exa源码阅读笔记1]]></title>
        <id>https://jgl666.github.io/post/exa-yuan-ma-yue-du-bi-ji-1/</id>
        <link href="https://jgl666.github.io/post/exa-yuan-ma-yue-du-bi-ji-1/">
        </link>
        <updated>2020-07-15T17:02:29.000Z</updated>
        <content type="html"><![CDATA[<h2 id="简介">简介</h2>
<p>exa是Rust编写的具备ls工具功能的工具</p>
<h2 id="功能">功能</h2>
<h4 id="不带任何参数ls和exa对比如下">不带任何参数ls和exa对比如下</h4>
<hr>
<pre><code>ls
</code></pre>
<figure data-type="image" tabindex="1"><img src="https://jgl666.github.io/post-images/1594832764892.PNG" alt="" loading="lazy"></figure>
<pre><code>exa
</code></pre>
<figure data-type="image" tabindex="2"><img src="https://jgl666.github.io/post-images/1594832778565.PNG" alt="" loading="lazy"></figure>
<p>可以看出exa颜色更加丰富，会根据文件类型显示不同的颜色，如图片、音视频、压缩文件等等，像编译的脚本如Makefile也会高亮。相比之下，ls对于文件类型没有区分那么细致。</p>
<h4 id="exa集成了tree的功能">exa集成了tree的功能</h4>
<p>exa 可以像tree一样列出目录结构</p>
<pre><code>exa -T xx
</code></pre>
<figure data-type="image" tabindex="3"><img src="https://jgl666.github.io/post-images/1594832800642.PNG" alt="" loading="lazy"></figure>
<h4 id="exa文件详细信息列举">exa文件详细信息列举</h4>
<pre><code>exa -l
</code></pre>
<p>exa -l<br>
<img src="https://jgl666.github.io/post-images/1594832810438.PNG" alt="" loading="lazy"></p>
<pre><code>ls -l
</code></pre>
<figure data-type="image" tabindex="4"><img src="https://jgl666.github.io/post-images/1594832825157.PNG" alt="" loading="lazy"></figure>
<p>对比可以看出exa 列出文件详细信息，文件元数据信息都是有颜色高亮的。</p>
<h4 id="列出隐藏文件即开头的文件">列出隐藏文件即.开头的文件</h4>
<p>对比ls 和 exa：ls -a 可以列出所有.开头的文件，包含 . 和 .. 目录。exa -a 仅能列出 . 开头的文件，不包含 . 和 .. 目录，exa -aa 列出包含 . 和 .. 目录的文件。</p>
<h4 id="其它功能">其它功能</h4>
<h5 id="列出文件详细信息带header">列出文件详细信息带header</h5>
<pre><code>exa -lh
</code></pre>
<figure data-type="image" tabindex="5"><img src="https://jgl666.github.io/post-images/1594832748814.PNG" alt="" loading="lazy"></figure>
<h5 id="tree形式列出文件详细信息以及带header">tree形式列出文件详细信息以及带header</h5>
<pre><code>exa -lhT xx
</code></pre>
<figure data-type="image" tabindex="6"><img src="https://jgl666.github.io/post-images/1594832735036.PNG" alt="" loading="lazy"></figure>
<h5 id="列出文件的inode号">列出文件的inode号</h5>
<pre><code>exa -lih
</code></pre>
<figure data-type="image" tabindex="7"><img src="https://jgl666.github.io/post-images/1594832718078.PNG" alt="" loading="lazy"></figure>
<h5 id="更详细的功能可以通过-help-命令获取">更详细的功能可以通过 --help 命令获取</h5>
<h2 id="代码结构">代码结构</h2>
<h4 id="目录结构">目录结构</h4>
<figure data-type="image" tabindex="8"><img src="https://jgl666.github.io/post-images/1594832690024.PNG" alt="" loading="lazy"></figure>
<h5 id="bin目录">bin目录</h5>
<hr>
<p>main函数入口，可执行文件exa主函数</p>
<h5 id="fs">fs</h5>
<hr>
<p><img src="https://jgl666.github.io/post-images/1594832658270.PNG" alt="" loading="lazy"><br>
<br>模块功能如下</p>
<ul>
<li>dir ： 对目录的读取，对隐藏目录的过滤</li>
<li>dir_action : 目录的操作，有三个动作：目录当作正常文件显示、目录以递归的方式显示、目录以树状格式显示</li>
<li>fields ： 对文件元数据信息的封装</li>
<li>file : 文件元数据信息的获取，即大小、权限、时间戳等等</li>
<li>filter ： 提供文件过滤以及排序功能</li>
<li>feature : 包含git相关功能项</li>
</ul>
<h5 id="info">info</h5>
<hr>
<p><img src="https://jgl666.github.io/post-images/1594832641219.PNG" alt="" loading="lazy"><br>
<br>列举了内置的文件类型列表，包含图像、音视频、编译脚本、压缩文件、doc、excel等等。为外部模块提供查询文件是否是特殊文件，从而外部根据文件类别做特殊的操作。</p>
<h5 id="options">options</h5>
<hr>
<p><img src="https://jgl666.github.io/post-images/1594832626875.PNG" alt="" loading="lazy"><br>
<br></p>
<ul>
<li>dir_action : 根据命令行参数，推断目录的操作类型</li>
<li>filter : 根据命令行参数包含sort 参数， 决定文件按照什么排序方式列举。</li>
<li>flags : 所有命令行参数的列举</li>
<li>help : 处理--help 命令行参数的输出</li>
<li>misfires : 失败一些处理</li>
<li>parser : 命令行参数的解析</li>
<li>style : 根据命令行参数推导文件名如何显示，如 -F 表示遇到特殊文件增加字符区分文件类型。</li>
<li>vars ： 环境变量的获取以及匹配</li>
<li>version : 版本号的获取</li>
<li>view ： 输出结果如何显示：网格、一行、一列、树状等等</li>
</ul>
<h5 id="output">output</h5>
<p><img src="https://jgl666.github.io/post-images/1594832607252.PNG" alt="" loading="lazy"><br>
<br></p>
<ul>
<li>render 文件夹里面定义了文件元数据每项的如何显示</li>
<li>外部文件如table、line、grid 等等，定义整个输出样式</li>
</ul>
<h5 id="style">style</h5>
<p>列举样式列表，可供外部直接调用。类似css文件定义的样式，外部要使用，直接调用即可</p>
<h2 id="整个exa框架图">整个exa框架图</h2>
<figure data-type="image" tabindex="9"><img src="https://jgl666.github.io/post-images/1594832591665.PNG" alt="" loading="lazy"></figure>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[quiz阅读笔记系列32]]></title>
        <id>https://jgl666.github.io/post/quiz-yue-du-bi-ji-xi-lie-32/</id>
        <link href="https://jgl666.github.io/post/quiz-yue-du-bi-ji-xi-lie-32/">
        </link>
        <updated>2020-07-07T12:53:07.000Z</updated>
        <content type="html"><![CDATA[<p><a href="https://dtolnay.github.io/rust-quiz/32">原文链接</a><br><br>
<a href="https://zhuanlan.zhihu.com/p/52098828">Rust Quiz 解读汇总</a></p>
<hr>
<pre><code>fn check(x: i32) -&gt; bool {
    print!(&quot;{}&quot;, x);
    false
}

fn main() {
    match (1, 2) {
        (x, _) | (_, x) if check(x) =&gt; {
            print!(&quot;3&quot;)
        }
        _ =&gt; print!(&quot;4&quot;),
    }
}
</code></pre>
<h2 id="解析">解析</h2>
<p>参看<a href="https://doc.rust-lang.org/reference/expressions/match-expr.html#match-guards">match guard</a><br><br>
上面这题的匹配过程：<br>
Rust match 匹配到 <mark>(x , _)</mark> ，此时x = 1, 然后执行 if 判断，check(x) 输出 1 , 返回false , Rust 继续匹配，匹配到 <mark>( _ , x)</mark>， 此时x = 2，再次执行 if 判断语句，返回false。继续匹配下面一条，因为 _ 是通配符，所以输出4<br><br>
流程如下图：</p>
<br>
<h2 id="拓展">拓展</h2>
<p>改为true 输出1 3</p>
<pre><code>fn check(x: i32) -&gt; bool {
    print!(&quot;{}&quot;, x);
    true
}

fn main() {
    match (1, 2) {
        (x, _) | (_, x) if check(x) =&gt; {
            print!(&quot;3&quot;)
        }
        _ =&gt; print!(&quot;4&quot;),
    }
}
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[quiz阅读笔记系列31]]></title>
        <id>https://jgl666.github.io/post/quiz-yue-du-bi-ji-xi-lie-31/</id>
        <link href="https://jgl666.github.io/post/quiz-yue-du-bi-ji-xi-lie-31/">
        </link>
        <updated>2020-07-07T12:52:04.000Z</updated>
        <content type="html"><![CDATA[<h2 id="原文链接"><a href="https://dtolnay.github.io/rust-quiz/31">原文链接</a><br><br>
<a href="https://zhuanlan.zhihu.com/p/52098828">Rust Quiz 解读汇总</a><br><br>
<a href="https://doc.rust-lang.org/reference/expressions/method-call-expr.html#method-call-expressions">相关文档</a></h2>
<pre><code>trait Or {
    fn f(self);
}

struct T;

impl Or for &amp;T {
    fn f(self) {
        print!(&quot;1&quot;);
    }
}

impl Or for &amp;&amp;&amp;&amp;T {
    fn f(self) {
        print!(&quot;2&quot;);
    }
}

fn main() {
    let t = T;
    let wt = &amp;T;
    let wwt = &amp;&amp;T;
    let wwwt = &amp;&amp;&amp;T;
    let wwwwt = &amp;&amp;&amp;&amp;T;
    let wwwwwt = &amp;&amp;&amp;&amp;&amp;T;
    t.f();
    wt.f();
    wwt.f();
    wwwt.f();
    wwwwt.f();
    wwwwwt.f();
}
</code></pre>
<h2 id="解析">解析</h2>
<h4 id="no1">NO.1</h4>
<hr>
<p>尝试寻找T对应的f方法，没有找到，然后给T加上&amp;，找到对应的方法</p>
<pre><code>let t = T;
t.f();
</code></pre>
<h4 id="no2">NO.2</h4>
<hr>
<p>直接找到对应的类型&amp;T</p>
<pre><code>let wt = &amp;T;
wt.f();
</code></pre>
<h4 id="no3">NO.3</h4>
<hr>
<p>找到对应的类型&amp;&amp;T,没找到,加上&amp;,还是没有，然后解引用，找到&amp;T</p>
<pre><code>let wwt = &amp;&amp;T;
wwt.f();
</code></pre>
<h4 id="no4">NO.4</h4>
<hr>
<p>找到对应的类型&amp;&amp;&amp;T,没找到,加上&amp;,找到 &amp;&amp;&amp;&amp;T</p>
<pre><code>let wwwt = &amp;&amp;&amp;T;
wwwt.f();
</code></pre>
<h4 id="no5">NO.5</h4>
<hr>
<p>找到对应的类型&amp;&amp;&amp;T,没找到,加上&amp;,没找到,解引用找到</p>
<pre><code>let wwwwt = &amp;&amp;&amp;&amp;T;
wwwwt.f();
</code></pre>
<h4 id="no6">NO.6</h4>
<hr>
<p>找到对应的类型&amp;&amp;&amp;&amp;&amp;T,没找到,加上&amp;, 没找到,解引用找到</p>
<pre><code>let wwwwwt = &amp;&amp;&amp;&amp;&amp;T;
wwwwwt.f();
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[quiz阅读笔记系列30]]></title>
        <id>https://jgl666.github.io/post/quiz-yue-du-bi-ji-xi-lie-30/</id>
        <link href="https://jgl666.github.io/post/quiz-yue-du-bi-ji-xi-lie-30/">
        </link>
        <updated>2020-07-07T11:04:35.000Z</updated>
        <content type="html"><![CDATA[<p><a href="https://dtolnay.github.io/rust-quiz/30">原文链接</a><br><br>
<a href="https://zhuanlan.zhihu.com/p/52098828">Rust Quiz 解读汇总</a><br></p>
<hr>
<pre><code>use std::rc::Rc;

struct A;

fn p&lt;X&gt;(x: X) {
    match std::mem::size_of::&lt;X&gt;() {
        0 =&gt; print!(&quot;0&quot;),
        _ =&gt; print!(&quot;1&quot;),
    }
}

fn main() {
    let a = &amp;A;
    p(a);
    p(a.clone());
    
    let b = &amp;();
    p(b);
    p(b.clone());
    
    let c = Rc::new(());
    p(Rc::clone(&amp;c));
    p(c.clone());
}
</code></pre>
<h2 id="解析">解析</h2>
<h4 id="no1">NO.1</h4>
<hr>
<p>P(a) 是std::mem::size_of::&lt;&amp;A&gt;(),输出1。</p>
<pre><code>    let a = &amp;A;
    p(a);
    p(a.clone());
</code></pre>
<p>clone的方法实现</p>
<pre><code>fn clone(&amp;self) -&gt; Self {
    *self
}
</code></pre>
<p>没有为A实现clone方法，会自动给A加&amp;。Clone默认给&amp;T实现clone方法</p>
<pre><code>impl&lt;T: ?Sized&gt; Clone for &amp;T {
    #[inline]
    fn clone(&amp;self) -&gt; Self {
        *self
    }
}
</code></pre>
<p>如果实现A的clone方法，输出0</p>
<pre><code>use std::clone::Clone;

impl Clone for A{
    fn clone(&amp;self)-&gt;Self{
        A
    }
}

</code></pre>
<h4 id="no2">NO.2</h4>
<hr>
<p>b的类似是&amp;(),p(b) 执行std::mem::size_of::&lt;&amp;()&gt;()输出1，()有实现clone，所以b.clone 返回0</p>
<pre><code>let b = &amp;();
p(b);
p(b.clone());
</code></pre>
<h4 id="no3">NO.3</h4>
<hr>
<p>Rc::clone返回的是Rc<T>,是指针，占一个指针大小</p>
<pre><code>let c = Rc::new(());
p(Rc::clone(&amp;c));
p(c.clone());
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[quiz阅读笔记系列29]]></title>
        <id>https://jgl666.github.io/post/quiz-yue-du-bi-ji-xi-lie-29/</id>
        <link href="https://jgl666.github.io/post/quiz-yue-du-bi-ji-xi-lie-29/">
        </link>
        <updated>2020-07-07T11:03:48.000Z</updated>
        <content type="html"><![CDATA[<p><a href="https://dtolnay.github.io/rust-quiz/29">原文链接</a><br><br>
<a href="https://zhuanlan.zhihu.com/p/52098828">Rust Quiz 解读汇总</a><br></p>
<hr>
<pre><code>trait Trait {
    fn p(&amp;self);
}

impl Trait for (u32) {
    fn p(&amp;self) { print!(&quot;1&quot;); }
}

impl Trait for (i32,) {
    fn p(&amp;self) { print!(&quot;2&quot;); }
}

impl Trait for (u32, u32) {
    fn p(&amp;self) { print!(&quot;3&quot;); }
}

impl Trait for (i32, i32,) {
    fn p(&amp;self) { print!(&quot;4&quot;); }
}

fn main() {
    (0).p();
    (0,).p();
    (0, 0).p();
    (0, 0,).p();
}
</code></pre>
<h2 id="解析">解析</h2>
<p>Rust中当元组中只有一个元素时，必须在这个元素的后面加上逗号表示</p>
<pre><code>(0,)
</code></pre>
<p>否则，(0)就是一个分组表达式，返回括号中的计算结果即0</p>
<pre><code>0
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[quiz阅读笔记系列28]]></title>
        <id>https://jgl666.github.io/post/quiz-yue-du-bi-ji-xi-lie-28/</id>
        <link href="https://jgl666.github.io/post/quiz-yue-du-bi-ji-xi-lie-28/">
        </link>
        <updated>2020-07-07T11:03:08.000Z</updated>
        <content type="html"><![CDATA[<p><a href="https://dtolnay.github.io/rust-quiz/28">原文链接</a><br><br>
<a href="https://zhuanlan.zhihu.com/p/52098828">Rust Quiz 解读汇总</a><br></p>
<pre><code>struct Guard;

impl Drop for Guard {
    fn drop(&amp;mut self) {
        print!(&quot;1&quot;);
    }
}

fn main() {
    let _guard = Guard;
    print!(&quot;3&quot;);
    let _ = Guard;
    print!(&quot;2&quot;);
}
</code></pre>
<h2 id="解析">解析</h2>
<p>这个是没有所有权的接收者，会立马drop</p>
<pre><code>let _ = Guard;
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[quiz阅读笔记系列27]]></title>
        <id>https://jgl666.github.io/post/quiz-yue-du-bi-ji-xi-lie-27/</id>
        <link href="https://jgl666.github.io/post/quiz-yue-du-bi-ji-xi-lie-27/">
        </link>
        <updated>2020-07-07T10:00:57.000Z</updated>
        <content type="html"><![CDATA[<p><a href="https://dtolnay.github.io/rust-quiz/27">原文链接</a><br><br>
<a href="https://zhuanlan.zhihu.com/p/52098828">Rust Quiz 解读汇总</a></p>
<hr>
<pre><code>trait Base {
    fn method(&amp;self) {
        print!(&quot;1&quot;);
    }
}

trait Derived: Base {
    fn method(&amp;self) {
        print!(&quot;2&quot;);
    }
}

struct BothTraits;
impl Base for BothTraits {}
impl Derived for BothTraits {}

fn dynamic_dispatch(x: &amp;dyn Base) {
    x.method();
}

fn static_dispatch&lt;T: Base&gt;(x: T) {
    x.method();
}

fn main() {
    dynamic_dispatch(&amp;BothTraits);
    static_dispatch(BothTraits);
}
</code></pre>
<h2 id="解析">解析</h2>
<p>Rust中没有继承的概念，只有组合的概念，这里不是继承，只有组合，意思时Derive和base的组合，实现Derived的前提时必须实现Base</p>
<pre><code>trait Derived: Base {
    fn method(&amp;self) {
        print!(&quot;2&quot;);
    }
}
</code></pre>
<p>下面都指定了trait对象的类型Base，不管时动态还是静态，只会调用Base实现的方法</p>
<pre><code>fn dynamic_dispatch(x: &amp;dyn Base) {
    x.method();
}

fn static_dispatch&lt;T: Base&gt;(x: T) {
    x.method();
}
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[ quiz阅读笔记系列26]]></title>
        <id>https://jgl666.github.io/post/quiz-yue-du-bi-ji-xi-lie-26/</id>
        <link href="https://jgl666.github.io/post/quiz-yue-du-bi-ji-xi-lie-26/">
        </link>
        <updated>2020-07-07T10:00:30.000Z</updated>
        <content type="html"><![CDATA[<pre><code>fn main() {
    let input = vec![1, 2, 3];

    let parity = input
        .iter()
        .map(|x| {
            print!(&quot;{}&quot;, x);
            x % 2
        });

    for p in parity {
        print!(&quot;{}&quot;, p);
    }
}
</code></pre>
<h2 id="解析">解析</h2>
<p>Map结构体</p>
<pre><code>pub struct Map&lt;I, F&gt; {
    iter: I,
    f: F,
}
</code></pre>
<p>Map的方法next</p>
<pre><code>#[inline]
fn next(&amp;mut self) -&gt; Option&lt;B&gt; {
    self.iter.next().map(&amp;mut self.f)
}

</code></pre>
<p>可见，迭代调用的是包裹的内部迭代器，这里是数组的next方法，map传递的是Map初始化的函数 &amp;mut self.f 。即：</p>
<pre><code>|x| {
    print!(&quot;{}&quot;, x);
    x % 2
}
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[quiz阅读笔记系列25]]></title>
        <id>https://jgl666.github.io/post/quiz-yue-du-bi-ji-xi-lie-25/</id>
        <link href="https://jgl666.github.io/post/quiz-yue-du-bi-ji-xi-lie-25/">
        </link>
        <updated>2020-07-07T09:44:25.000Z</updated>
        <content type="html"><![CDATA[<p><a href="https://dtolnay.github.io/rust-quiz/25">原文链接</a><br><br>
<a href="https://zhuanlan.zhihu.com/p/52098828">Rust Quiz 解读汇总</a></p>
<hr>
<pre><code>use std::fmt::{self, Display};

struct S;

impl Display for S {
    fn fmt(&amp;self, formatter: &amp;mut fmt::Formatter) -&gt; fmt::Result {
        formatter.write_str(&quot;1&quot;)
    }
}

impl Drop for S {
    fn drop(&amp;mut self) {
        print!(&quot;2&quot;);
    }
}

fn f() -&gt; S {
    S
}

fn main() {
    let S = f();
    print!(&quot;{}&quot;, S);
}
</code></pre>
<h2 id="解析">解析</h2>
<p>这里不是赋值，是结构体解构，函数的内部的变量没有发生所有权转移，直接drop掉。</p>
<pre><code> let S = f();
</code></pre>
<p>S打印完也Drop了</p>
<pre><code>print!(&quot;{}&quot;, S);
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[ quiz阅读笔记系列24]]></title>
        <id>https://jgl666.github.io/post/quiz-yue-du-bi-ji-xi-lie-24/</id>
        <link href="https://jgl666.github.io/post/quiz-yue-du-bi-ji-xi-lie-24/">
        </link>
        <updated>2020-07-07T09:43:14.000Z</updated>
        <content type="html"><![CDATA[<p><a href="https://dtolnay.github.io/rust-quiz/21">原文链接</a><br><br>
<a href="https://zhuanlan.zhihu.com/p/52098828">Rust Quiz 解读汇总</a></p>
<hr>
<pre><code>fn main() {
    let x: u8 = 1;
    const K: u8 = 2;

    macro_rules! m {
        () =&gt; {
            print!(&quot;{}{}&quot;, x, K);
        };
    }

    {
        let x: u8 = 3;
        const K: u8 = 4;

        m!();
    }
}
</code></pre>
<h2 id="解析">解析</h2>
<p>Rust宏是部分卫生的，参看<a href="https://danielkeep.github.io/tlborm/book/mbe-min-hygiene.html">卫生宏</a><br><br>
本题中宏中x先被替换为1，后面括号内的x不会影响宏中的x。const 在Rust中一个Item，不是本地变量，在出现K的地方会被替换为对应的值。</p>
]]></content>
    </entry>
</feed>